version: 2.0
orbs:
  node: circleci/node@5.0.2
jobs:
  scan-using-sonarqube:
    machine:
      image: ubuntu-2004:202010-01
      resource_class: large
    working_directory: ~/Retail---Marketplace-SellerPortalFrontEnd
    steps:
      # Pulls the code from git repo
      - checkout
      - run:
          name: Placeholder for Sonarqube
          command: echo "Sonner than you know, you'll see a lot of reports from Sonarqube."
  scan-using-talisman:
    machine:
      image: ubuntu-2004:202010-01
      resource_class: large
    working_directory: ~/Retail---Marketplace-SellerPortalFrontEnd
    steps:
      # Pulls the code from git repo
      - checkout
      # Installs Talisman
      - run:
          name: Install Talisman
          command: mkdir -p ~/.talisman &&
            cd ~/.talisman &&
            curl -L -O https://github.com/thoughtworks/talisman/releases/download/v1.28.0/talisman_linux_386 &&
            chmod +x talisman_linux_386

      # Installs Talisman HTML Report Generator
      - run:
          name: Install HTML Report Generator for Talisman
          command:
            curl https://github.com/jaydeepc/talisman-html-report/archive/v1.3.zip -o ~/.talisman/talisman_html_report.zip -J -L &&
            cd ~/.talisman && unzip talisman_html_report.zip -d . &&
            mv talisman-html-report-1.3 talisman_html_report &&
            rm talisman_html_report.zip

      # Run Talisman
      - run:
          name: Run Talisman
          # || true to ensure that the following steps can carry on irrespective of the success/failure of this step
          command: ~/.talisman/talisman_linux_386 --scanWithHtml || true

      # Save Talisman Reports
      - store_artifacts:
          path: ~/Retail---Marketplace-SellerPortalFrontEnd/talisman_html_report

  notify:
    machine:
      image: ubuntu-2004:202010-01
      resource_class: large
    working_directory: ~/Retail---Marketplace-SellerPortalFrontEnd
    steps:
      # Notifies test success/failure to Google Space using webhooks
      - run:
          name: On pipeline SUCCESS, notify in Google Space
          when: on_success
          command: |
            curl --header "Content-Type: application/json" \
            --request POST \
            --data $CHAT_WEBHOOK_SUCCESS_HTML_MESSAGE \
            "$CHAT_WEBHOOK_URL"
      - run:
          name: On pipeline FAILURE, notify in Google Space
          when: on_fail
          command: |
            curl --header "Content-Type: application/json" \
            --request POST \
            --data $CHAT_WEBHOOK_FAILURE_HTML_MESSAGE \
            "$CHAT_WEBHOOK_URL"
  build:
    executor: node/default
    working_directory: ~/Retail---Marketplace-SellerPortalFrontEnd
    steps:
      # Pulls the code from git repo
      - checkout
      # Take the compiled code and package it in its distributable format, such as a JAR.
      - run:
          name: Build App
          command: npm run build
  test:
    executor: node/default
    working_directory: ~/Retail---Marketplace-SellerPortalFrontEnd
    steps:
      # Pulls the code from git repo
      - checkout
      # Test the compiled source code using a suitable unit testing framework
      - run: npm run test

workflows:
  version: 2
  test_and_build:
    jobs:
      - scan-using-talisman
      - scan-using-sonarqube:
          requires:
            - scan-using-talisman
      - test:
          requires:
            - scan-using-sonarqube
      - build:
          requires:
            - test
      - notify:
          requires:
            - build
